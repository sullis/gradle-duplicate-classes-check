plugins {
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.17.0'
}

repositories {
    jcenter()
}

apply plugin: 'groovy'

group = 'net.idlestate'
version = '1.3.0-SNAPSHOT'

def functionalTest = sourceSets.create("functionalTest")

dependencies {
    testImplementation 'junit:junit:4.13.2'
    functionalTestImplementation 'junit:junit:4.13.2'
}

license {
    exclude('**/*.jar')
    exclude('**/*.html')
}

licenseTest {
    exclude('**/*.jar', '**/*.html')
}

test {
    useJUnit()
}

gradlePlugin {
    plugins {
        duplicateClassesCheck {
            id = 'net.idlestate.gradle-duplicate-classes-check'
            implementationClass = 'net.idlestate.gradle.duplicates.CheckDuplicateClassesPlugin'
        }
    }

    testSourceSets(sourceSets.functionalTest)
}

def functionalTestTask = tasks.register("functionalTest", Test) {
    description = 'Runs the functional tests.'
    group = "verification"
    testClassesDirs = functionalTest.output.classesDirs
    classpath = functionalTest.runtimeClasspath
    mustRunAfter(tasks.test)
}

check {
    dependsOn(functionalTestTask)
}

pluginBundle {
    website = 'https://github.com/tehlers/gradle-duplicate-classes-check'
    vcsUrl = 'https://github.com/tehlers/gradle-duplicate-classes-check.git'

    plugins {
        duplicateClassesCheck {
            id = 'net.idlestate.gradle-duplicate-classes-check'
            displayName = 'Duplicate classes check'
            description = 'A Gradle plugin that checks whether different artifacts in a configuration provide the same classes'
            tags = ['classpath', 'configuration', 'dependencies', 'duplicates']
        }
    }
}

task sourceJar( type: Jar ) {
    from sourceSets.main.allGroovy
    archiveClassifier = "sources"
}


publishing {
    publications {
        gradlePlugin( MavenPublication ) {
            artifactId archivesBaseName
            from components.java

            artifact sourceJar

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    description 'A Gradle plugin that checks whether different artifacts in a configuration provide the same classes'
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}
